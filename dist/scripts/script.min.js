(function($) {
    $.loadingButton = function(element, options) {
        var settings = $.extend({}, $.loadingButton.defaults, options), btn = $(element);
        function setLoadingState() {
            if (!settings.condition()) {
                return;
            }
            console.log(settings);
            if (settings.loadingClass) {
                btn.addClass(settings.loadingClass);
            }
            var isInput = btn.is("input"), btnText = isInput ? btn.val() : btn.text(), loadingText = btn.data("loading-text");
            if (loadingText) {
                btn.data("default-text", btnText);
                if (isInput) {
                    btn.val(loadingText);
                } else {
                    btn.text(loadingText);
                }
            }
            if (settings.disable) {
                setTimeout(function() {
                    btn.prop("disabled", true);
                }, 1);
            }
        }
        function restoreButton() {
            if (settings.loadingClass) {
                btn.removeClass(settings.loadingClass);
            }
            if (settings.disable) {
                btn.prop("disabled", false);
            }
            var isInput = btn.is("input"), defaultText = btn.data("default-text");
            if (defaultText) {
                if (isInput) {
                    btn.val(defaultText);
                } else {
                    btn.text(defaultText);
                }
            }
        }
        if (settings.loadingText) {
            btn.data("loading-text", settings.loadingText);
        }
        btn.click(function() {
            setLoadingState();
        }).on("reset", function() {
            restoreButton();
        });
    };
    $.fn.loadingButton = function(options) {
        return $(this).each(function() {
            new $.loadingButton(this, options);
        });
    };
    $.loadingButton.defaults = {
        condition: function() {
            return true;
        },
        disable: true,
        loadingClass: null,
        loadingText: null
    };
    $(function() {
        $("[data-loading-button]").loadingButton();
    });
})(jQuery);

(function($) {
    $.fn.maxLength = function() {
        var testElement = document.createElement("textarea"), supportsMaxlength = "maxLength" in testElement, el = $(this);
        if (!supportsMaxlength) {
            el.keyup(function() {
                var $this = $(this), max = parseInt($this.attr("maxlength")), text = $this.val();
                if (text.length > max) {
                    $this.val(text.substr(0, max));
                }
            });
        }
        return el;
    };
})(jQuery);

(function(factory) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else if (typeof module === "object" && module.exports) {
        factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    var debugMode = false;
    var isOperaMini = Object.prototype.toString.call(window.operamini) === "[object OperaMini]";
    var isInputSupported = "placeholder" in document.createElement("input") && !isOperaMini && !debugMode;
    var isTextareaSupported = "placeholder" in document.createElement("textarea") && !isOperaMini && !debugMode;
    var valHooks = $.valHooks;
    var propHooks = $.propHooks;
    var hooks;
    var placeholder;
    var settings = {};
    if (isInputSupported && isTextareaSupported) {
        placeholder = $.fn.placeholder = function() {
            return this;
        };
        placeholder.input = true;
        placeholder.textarea = true;
    } else {
        placeholder = $.fn.placeholder = function(options) {
            var defaults = {
                customClass: "placeholder"
            };
            settings = $.extend({}, defaults, options);
            return this.filter((isInputSupported ? "textarea" : ":input") + "[" + (debugMode ? "placeholder-x" : "placeholder") + "]").not("." + settings.customClass).not(":radio, :checkbox, [type=hidden]").bind({
                "focus.placeholder": clearPlaceholder,
                "blur.placeholder": setPlaceholder
            }).data("placeholder-enabled", true).trigger("blur.placeholder");
        };
        placeholder.input = isInputSupported;
        placeholder.textarea = isTextareaSupported;
        hooks = {
            get: function(element) {
                var $element = $(element);
                var $passwordInput = $element.data("placeholder-password");
                if ($passwordInput) {
                    return $passwordInput[0].value;
                }
                return $element.data("placeholder-enabled") && $element.hasClass(settings.customClass) ? "" : element.value;
            },
            set: function(element, value) {
                var $element = $(element);
                var $replacement;
                var $passwordInput;
                if (value !== "") {
                    $replacement = $element.data("placeholder-textinput");
                    $passwordInput = $element.data("placeholder-password");
                    if ($replacement) {
                        clearPlaceholder.call($replacement[0], true, value) || (element.value = value);
                        $replacement[0].value = value;
                    } else if ($passwordInput) {
                        clearPlaceholder.call(element, true, value) || ($passwordInput[0].value = value);
                        element.value = value;
                    }
                }
                if (!$element.data("placeholder-enabled")) {
                    element.value = value;
                    return $element;
                }
                if (value === "") {
                    element.value = value;
                    if (element != safeActiveElement()) {
                        setPlaceholder.call(element);
                    }
                } else {
                    if ($element.hasClass(settings.customClass)) {
                        clearPlaceholder.call(element);
                    }
                    element.value = value;
                }
                return $element;
            }
        };
        if (!isInputSupported) {
            valHooks.input = hooks;
            propHooks.value = hooks;
        }
        if (!isTextareaSupported) {
            valHooks.textarea = hooks;
            propHooks.value = hooks;
        }
        $(function() {
            $(document).delegate("form", "submit.placeholder", function() {
                var $inputs = $("." + settings.customClass, this).each(function() {
                    clearPlaceholder.call(this, true, "");
                });
                setTimeout(function() {
                    $inputs.each(setPlaceholder);
                }, 10);
            });
        });
        $(window).bind("beforeunload.placeholder", function() {
            var clearPlaceholders = true;
            try {
                if (document.activeElement.toString() === "javascript:void(0)") {
                    clearPlaceholders = false;
                }
            } catch (exception) {}
            if (clearPlaceholders) {
                $("." + settings.customClass).each(function() {
                    this.value = "";
                });
            }
        });
    }
    function args(elem) {
        var newAttrs = {};
        var rinlinejQuery = /^jQuery\d+$/;
        $.each(elem.attributes, function(i, attr) {
            if (attr.specified && !rinlinejQuery.test(attr.name)) {
                newAttrs[attr.name] = attr.value;
            }
        });
        return newAttrs;
    }
    function clearPlaceholder(event, value) {
        var input = this;
        var $input = $(this);
        if (input.value === $input.attr(debugMode ? "placeholder-x" : "placeholder") && $input.hasClass(settings.customClass)) {
            input.value = "";
            $input.removeClass(settings.customClass);
            if ($input.data("placeholder-password")) {
                $input = $input.hide().nextAll('input[type="password"]:first').show().attr("id", $input.removeAttr("id").data("placeholder-id"));
                if (event === true) {
                    $input[0].value = value;
                    return value;
                }
                $input.focus();
            } else {
                input == safeActiveElement() && input.select();
            }
        }
    }
    function setPlaceholder(event) {
        var $replacement;
        var input = this;
        var $input = $(this);
        var id = input.id;
        if (event && event.type === "blur" && $input.hasClass(settings.customClass)) {
            return;
        }
        if (input.value === "") {
            if (input.type === "password") {
                if (!$input.data("placeholder-textinput")) {
                    try {
                        $replacement = $input.clone().prop({
                            type: "text"
                        });
                    } catch (e) {
                        $replacement = $("<input>").attr($.extend(args(this), {
                            type: "text"
                        }));
                    }
                    $replacement.removeAttr("name").data({
                        "placeholder-enabled": true,
                        "placeholder-password": $input,
                        "placeholder-id": id
                    }).bind("focus.placeholder", clearPlaceholder);
                    $input.data({
                        "placeholder-textinput": $replacement,
                        "placeholder-id": id
                    }).before($replacement);
                }
                input.value = "";
                $input = $input.removeAttr("id").hide().prevAll('input[type="text"]:first').attr("id", $input.data("placeholder-id")).show();
            } else {
                var $passwordInput = $input.data("placeholder-password");
                if ($passwordInput) {
                    $passwordInput[0].value = "";
                    $input.attr("id", $input.data("placeholder-id")).show().nextAll('input[type="password"]:last').hide().removeAttr("id");
                }
            }
            $input.addClass(settings.customClass);
            $input[0].value = $input.attr(debugMode ? "placeholder-x" : "placeholder");
        } else {
            $input.removeClass(settings.customClass);
        }
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (exception) {}
    }
});

(function(f) {
    "use strict";
    "function" === typeof define && define.amd ? define([ "jquery" ], f) : "undefined" !== typeof module && module.exports ? module.exports = f(require("jquery")) : f(jQuery);
})(function($) {
    "use strict";
    function n(a) {
        return !a.nodeName || -1 !== $.inArray(a.nodeName.toLowerCase(), [ "iframe", "#document", "html", "body" ]);
    }
    function h(a) {
        return $.isFunction(a) || $.isPlainObject(a) ? a : {
            top: a,
            left: a
        };
    }
    var p = $.scrollTo = function(a, d, b) {
        return $(window).scrollTo(a, d, b);
    };
    p.defaults = {
        axis: "xy",
        duration: 0,
        limit: !0
    };
    $.fn.scrollTo = function(a, d, b) {
        "object" === typeof d && (b = d, d = 0);
        "function" === typeof b && (b = {
            onAfter: b
        });
        "max" === a && (a = 9e9);
        b = $.extend({}, p.defaults, b);
        d = d || b.duration;
        var u = b.queue && 1 < b.axis.length;
        u && (d /= 2);
        b.offset = h(b.offset);
        b.over = h(b.over);
        return this.each(function() {
            function k(a) {
                var k = $.extend({}, b, {
                    queue: !0,
                    duration: d,
                    complete: a && function() {
                        a.call(q, e, b);
                    }
                });
                r.animate(f, k);
            }
            if (null !== a) {
                var l = n(this), q = l ? this.contentWindow || window : this, r = $(q), e = a, f = {}, t;
                switch (typeof e) {
                  case "number":
                  case "string":
                    if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(e)) {
                        e = h(e);
                        break;
                    }
                    e = l ? $(e) : $(e, q);

                  case "object":
                    if (e.length === 0) return;
                    if (e.is || e.style) t = (e = $(e)).offset();
                }
                var v = $.isFunction(b.offset) && b.offset(q, e) || b.offset;
                $.each(b.axis.split(""), function(a, c) {
                    var d = "x" === c ? "Left" : "Top", m = d.toLowerCase(), g = "scroll" + d, h = r[g](), n = p.max(q, c);
                    t ? (f[g] = t[m] + (l ? 0 : h - r.offset()[m]), b.margin && (f[g] -= parseInt(e.css("margin" + d), 10) || 0, 
                    f[g] -= parseInt(e.css("border" + d + "Width"), 10) || 0), f[g] += v[m] || 0, b.over[m] && (f[g] += e["x" === c ? "width" : "height"]() * b.over[m])) : (d = e[m], 
                    f[g] = d.slice && "%" === d.slice(-1) ? parseFloat(d) / 100 * n : d);
                    b.limit && /^\d+$/.test(f[g]) && (f[g] = 0 >= f[g] ? 0 : Math.min(f[g], n));
                    !a && 1 < b.axis.length && (h === f[g] ? f = {} : u && (k(b.onAfterFirst), f = {}));
                });
                k(b.onAfter);
            }
        });
    };
    p.max = function(a, d) {
        var b = "x" === d ? "Width" : "Height", h = "scroll" + b;
        if (!n(a)) return a[h] - $(a)[b.toLowerCase()]();
        var b = "client" + b, k = a.ownerDocument || a.document, l = k.documentElement, k = k.body;
        return Math.max(l[h], k[h]) - Math.min(l[b], k[b]);
    };
    $.Tween.propHooks.scrollLeft = $.Tween.propHooks.scrollTop = {
        get: function(a) {
            return $(a.elem)[a.prop]();
        },
        set: function(a) {
            var d = this.get(a);
            if (a.options.interrupt && a._last && a._last !== d) return $(a.elem).stop();
            var b = Math.round(a.now);
            d !== b && ($(a.elem)[a.prop](b), a._last = this.get(a));
        }
    };
    return p;
});

!function(e, n, s) {
    function t(e, n) {
        return typeof e === n;
    }
    function o() {
        var e, n, s, o, a, i, c;
        for (var f in r) if (r.hasOwnProperty(f)) {
            if (e = [], n = r[f], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (s = 0; s < n.options.aliases.length; s++) e.push(n.options.aliases[s].toLowerCase());
            for (o = t(n.fn, "function") ? n.fn() : n.fn, a = 0; a < e.length; a++) i = e[a], 
            c = i.split("."), 1 === c.length ? Modernizr[c[0]] = o : (!Modernizr[c[0]] || Modernizr[c[0]] instanceof Boolean || (Modernizr[c[0]] = new Boolean(Modernizr[c[0]])), 
            Modernizr[c[0]][c[1]] = o), l.push((o ? "" : "no-") + c.join("-"));
        }
    }
    function a(e) {
        var n = f.className, s = Modernizr._config.classPrefix || "";
        if (u && (n = n.baseVal), Modernizr._config.enableJSClass) {
            var t = new RegExp("(^|\\s)" + s + "no-js(\\s|$)");
            n = n.replace(t, "$1" + s + "js$2");
        }
        Modernizr._config.enableClasses && (n += " " + s + e.join(" " + s), u ? f.className.baseVal = n : f.className = n);
    }
    function i() {
        return "function" != typeof n.createElement ? n.createElement(arguments[0]) : u ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0]) : n.createElement.apply(n, arguments);
    }
    var l = [], r = [], c = {
        _version: "3.3.1",
        _config: {
            classPrefix: "",
            enableClasses: !0,
            enableJSClass: !0,
            usePrefixes: !0
        },
        _q: [],
        on: function(e, n) {
            var s = this;
            setTimeout(function() {
                n(s[e]);
            }, 0);
        },
        addTest: function(e, n, s) {
            r.push({
                name: e,
                fn: n,
                options: s
            });
        },
        addAsyncTest: function(e) {
            r.push({
                name: null,
                fn: e
            });
        }
    }, Modernizr = function() {};
    Modernizr.prototype = c, Modernizr = new Modernizr(), Modernizr.addTest("geolocation", "geolocation" in navigator);
    var f = n.documentElement, u = "svg" === f.nodeName.toLowerCase(), p = c._config.usePrefixes ? " -webkit- -moz- -o- -ms- ".split(" ") : [ "", "" ];
    c._prefixes = p, Modernizr.addTest("csscalc", function() {
        var e = "width:", n = "calc(10px);", s = i("a");
        return s.style.cssText = e + p.join(n + e), !!s.style.length;
    }), o(), a(l), delete c.addTest, delete c.addAsyncTest;
    for (var d = 0; d < Modernizr._q.length; d++) Modernizr._q[d]();
    e.Modernizr = Modernizr;
}(window, document);

$(document).ready(function() {});

$(window).ready(function(e) {});